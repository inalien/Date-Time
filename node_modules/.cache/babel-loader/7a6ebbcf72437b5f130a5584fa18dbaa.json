{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  fromMs,\n  fromS,\n  toMs,\n  toS\n};\n\nconst zeroFill = require('zero-fill'); // Time units with their corresponding values in miliseconds\n\n\nconst HOUR = 3600000;\nconst MINUTE = 60000;\nconst SECOND = 1000;\nconst TIME_FORMAT_ERRMSG = 'Time format error'; // =============================================================================\n// Export functions\n// =============================================================================\n\nfunction fromMs(ms, format = 'mm:ss') {\n  if (typeof ms !== 'number' || Number.isNaN(ms)) {\n    throw new Error('NaN error');\n  }\n\n  let absMs = Math.abs(ms);\n  let negative = ms < 0;\n  let hours = Math.floor(absMs / HOUR);\n  let minutes = Math.floor(absMs % HOUR / MINUTE);\n  let seconds = Math.floor(absMs % MINUTE / SECOND);\n  let miliseconds = Math.floor(absMs % SECOND);\n  return formatTime({\n    negative,\n    hours,\n    minutes,\n    seconds,\n    miliseconds\n  }, format);\n}\n\nfunction fromS(s, format = 'mm:ss') {\n  if (typeof s !== 'number' || Number.isNaN(s)) {\n    throw new Error('NaN error');\n  }\n\n  let ms = s * SECOND;\n  return fromMs(ms, format);\n}\n\nfunction toMs(time, format = 'mm:ss') {\n  let re;\n\n  if (['mm:ss', 'mm:ss.sss', 'hh:mm:ss', 'hh:mm:ss.sss'].includes(format)) {\n    re = /^(-)?(?:(\\d\\d+):)?(\\d\\d):(\\d\\d)(\\.\\d+)?$/;\n  } else if (format === 'hh:mm') {\n    re = /^(-)?(\\d\\d):(\\d\\d)(?::(\\d\\d)(?:(\\.\\d+))?)?$/;\n  } else {\n    throw new Error(TIME_FORMAT_ERRMSG);\n  }\n\n  let result = re.exec(time);\n  if (!result) throw new Error();\n  let negative = result[1] === '-';\n  let hours = result[2] | 0;\n  let minutes = result[3] | 0;\n  let seconds = result[4] | 0;\n  let miliseconds = Math.floor(1000 * result[5] | 0);\n\n  if (minutes > 60 || seconds > 60) {\n    throw new Error();\n  }\n\n  return (negative ? -1 : 1) * (hours * HOUR + minutes * MINUTE + seconds * SECOND + miliseconds);\n}\n\nfunction toS(time, format = 'mm:ss') {\n  let ms = toMs(time, format);\n  return Math.floor(ms / SECOND);\n} // =============================================================================\n// Utility functions\n// =============================================================================\n\n\nfunction formatTime(time, format) {\n  let showMs;\n  let showSc;\n  let showHr;\n\n  switch (format.toLowerCase()) {\n    case 'hh:mm:ss.sss':\n      showMs = true;\n      showSc = true;\n      showHr = true;\n      break;\n\n    case 'hh:mm:ss':\n      showMs = !!time.miliseconds;\n      showSc = true;\n      showHr = true;\n      break;\n\n    case 'hh:mm':\n      showMs = !!time.miliseconds;\n      showSc = showMs || !!time.seconds;\n      showHr = true;\n      break;\n\n    case 'mm:ss':\n      showMs = !!time.miliseconds;\n      showSc = true;\n      showHr = !!time.hours;\n      break;\n\n    case 'mm:ss.sss':\n      showMs = true;\n      showSc = true;\n      showHr = !!time.hours;\n      break;\n\n    default:\n      throw new Error(TIME_FORMAT_ERRMSG);\n  }\n\n  let hh = zeroFill(2, time.hours);\n  let mm = zeroFill(2, time.minutes);\n  let ss = zeroFill(2, time.seconds);\n  let sss = zeroFill(3, time.miliseconds);\n  return (time.negative ? '-' : '') + (showHr ? showMs ? \"\".concat(hh, \":\").concat(mm, \":\").concat(ss, \".\").concat(sss) : showSc ? \"\".concat(hh, \":\").concat(mm, \":\").concat(ss) : \"\".concat(hh, \":\").concat(mm) : showMs ? \"\".concat(mm, \":\").concat(ss, \".\").concat(sss) : \"\".concat(mm, \":\").concat(ss));\n}","map":null,"metadata":{},"sourceType":"script"}