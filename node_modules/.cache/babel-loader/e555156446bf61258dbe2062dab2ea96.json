{"ast":null,"code":"import _slicedToArray from \"/Users/Jlnalien/Documents/REACT/date.time/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Jlnalien/Documents/REACT/date.time/src/components/functions/timer.js\";\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport TimeFormat from \"hh-mm-ss\";\n\nconst Timer = () => {\n  let mainTime;\n\n  const secondsLeft = () => {\n    const date = new Date();\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n    const left = (23 - hours) * 3600 + (60 - minutes) * 60 + (60 - seconds);\n    return left;\n  };\n\n  const _useState = useState(secondsLeft()),\n        _useState2 = _slicedToArray(_useState, 2),\n        seconds = _useState2[0],\n        setSeconds = _useState2[1];\n\n  useEffect(() => {\n    startTime();\n    return () => {\n      stopTimer();\n    };\n  });\n\n  const startTime = () => {\n    if (seconds && seconds > 0) {\n      mainTime = setInterval(tick, 1000);\n    }\n  };\n\n  const stopTimer = () => {\n    clearInterval(mainTime);\n  };\n\n  const tick = () => {\n    setSeconds(seconds => {\n      const updatedSeconds = seconds - 1;\n\n      if (updatedSeconds < 1) {\n        stopTimer();\n      }\n\n      return updatedSeconds;\n    });\n  };\n\n  const display = TimeFormat.fromS(seconds, \"hh:mm:ss\");\n\n  const _display$split = display.split(\":\"),\n        _display$split2 = _slicedToArray(_display$split, 3),\n        h = _display$split2[0],\n        m = _display$split2[1],\n        s = _display$split2[2];\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, h, \":\", m, \":\", s);\n};\n\nexport default Timer;","map":{"version":3,"sources":["/Users/Jlnalien/Documents/REACT/date.time/src/components/functions/timer.js"],"names":["React","useState","useEffect","Fragment","TimeFormat","Timer","mainTime","secondsLeft","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","left","setSeconds","startTime","stopTimer","setInterval","tick","clearInterval","updatedSeconds","display","fromS","split","h","m","s"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,UAAP,MAAuB,UAAvB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,MAAIC,QAAJ;;AACA,QAAMC,WAAW,GAAG,MAAM;AACxB,UAAMC,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACA,UAAMC,KAAK,GAAGF,IAAI,CAACG,QAAL,EAAd;AACA,UAAMC,OAAO,GAAGJ,IAAI,CAACK,UAAL,EAAhB;AACA,UAAMC,OAAO,GAAGN,IAAI,CAACO,UAAL,EAAhB;AACA,UAAMC,IAAI,GAAG,CAAC,KAAKN,KAAN,IAAe,IAAf,GAAsB,CAAC,KAAKE,OAAN,IAAiB,EAAvC,IAA6C,KAAKE,OAAlD,CAAb;AACA,WAAOE,IAAP;AACD,GAPD;;AAFkB,oBAWYf,QAAQ,CAACM,WAAW,EAAZ,CAXpB;AAAA;AAAA,QAWXO,OAXW;AAAA,QAWFG,UAXE;;AAYlBf,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,SAAS;AACT,WAAO,MAAM;AACXC,MAAAA,SAAS;AACV,KAFD;AAGD,GALQ,CAAT;;AAOA,QAAMD,SAAS,GAAG,MAAM;AACtB,QAAIJ,OAAO,IAAIA,OAAO,GAAG,CAAzB,EAA4B;AAC1BR,MAAAA,QAAQ,GAAGc,WAAW,CAACC,IAAD,EAAO,IAAP,CAAtB;AACD;AACF,GAJD;;AAMA,QAAMF,SAAS,GAAG,MAAM;AACtBG,IAAAA,aAAa,CAAChB,QAAD,CAAb;AACD,GAFD;;AAIA,QAAMe,IAAI,GAAG,MAAM;AACjBJ,IAAAA,UAAU,CAACH,OAAO,IAAI;AACpB,YAAMS,cAAc,GAAGT,OAAO,GAAG,CAAjC;;AACA,UAAIS,cAAc,GAAG,CAArB,EAAwB;AACtBJ,QAAAA,SAAS;AACV;;AACD,aAAOI,cAAP;AACD,KANS,CAAV;AAOD,GARD;;AAUA,QAAMC,OAAO,GAAGpB,UAAU,CAACqB,KAAX,CAAiBX,OAAjB,EAA0B,UAA1B,CAAhB;;AAvCkB,yBAwCAU,OAAO,CAACE,KAAR,CAAc,GAAd,CAxCA;AAAA;AAAA,QAwCXC,CAxCW;AAAA,QAwCRC,CAxCQ;AAAA,QAwCLC,CAxCK;;AAyClB,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,CADH,OACOC,CADP,OACWC,CADX,CADF;AAKD,CA9CD;;AA+CA,eAAexB,KAAf","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\nimport TimeFormat from \"hh-mm-ss\";\n\nconst Timer = () => {\n  let mainTime;\n  const secondsLeft = () => {\n    const date = new Date();\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const seconds = date.getSeconds();\n    const left = (23 - hours) * 3600 + (60 - minutes) * 60 + (60 - seconds);\n    return left;\n  };\n\n  const [seconds, setSeconds] = useState(secondsLeft());\n  useEffect(() => {\n    startTime();\n    return () => {\n      stopTimer();\n    };\n  });\n\n  const startTime = () => {\n    if (seconds && seconds > 0) {\n      mainTime = setInterval(tick, 1000);\n    }\n  };\n\n  const stopTimer = () => {\n    clearInterval(mainTime);\n  };\n\n  const tick = () => {\n    setSeconds(seconds => {\n      const updatedSeconds = seconds - 1;\n      if (updatedSeconds < 1) {\n        stopTimer();\n      }\n      return updatedSeconds;\n    });\n  };\n\n  const display = TimeFormat.fromS(seconds, \"hh:mm:ss\");\n  const [h, m, s] = display.split(\":\");\n  return (\n    <Fragment>\n      {h}:{m}:{s}\n    </Fragment>\n  );\n};\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}